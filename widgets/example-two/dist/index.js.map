{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["import React, {Component} from 'react';\n\nclass MyComponent extends Component {\n\n    state = {\n        events: [],\n        users: [],\n        isLoading: false,\n    };\n\n    componentDidMount() {\n        window.addEventListener('widgets__on-click', this.handleEvent);\n        this.fetchSomeData();\n    }\n\n    render() {\n        return (\n            <div>\n                Component listening for events:\n\n                <div>\n                    <h3>Events:</h3>\n                    {!this.state.events.length && (\n                        <div>You need to click a button from a first component in \"Components communicating\" example to add new events</div>\n                    )}\n                    {this.state.events.map(event => (\n                        <div key={`key-${event}`}>{event}</div>\n                    ))}\n                </div>\n                <div>\n                    <h3>Users:</h3>\n                    {this.state.isLoading && <span>Loading...</span>}\n                    {this.state.users.map(user => {\n                        return (\n                            <div key={`user-${user.id}`}>\n                                {user.name}\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        );\n    }\n\n    fetchSomeData = async () => {\n        this.setState({\n            isLoading: true\n        }, async () => {\n            const data = await fetch('https://jsonplaceholder.typicode.com/users');\n            const parsedData = await data.json();\n\n            this.setState({\n                isLoading: false,\n                users: parsedData\n            });\n        })\n    };\n\n    handleEvent = () => {\n        this.setState({\n            events: [...this.state.events, `Event: ${new Date().toJSON()}`]\n        })\n    }\n}\n\nMyComponent.propTypes = {};\n\nexport default MyComponent;\n"],"names":["MyComponent","events","users","isLoading","setState","fetch","data","json","parsedData","state","Date","toJSON","window","addEventListener","handleEvent","fetchSomeData","React","length","map","event","user","id","name","Component","propTypes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA;;;;;;;;;;;;;;;;;;4DAEM;AACJC,MAAAA,MAAM,EAAE,EADJ;AAEJC,MAAAA,KAAK,EAAE,EAFH;AAGJC,MAAAA,SAAS,EAAE;AAHP;;;;;;4BAwCQ;AAAA;AAAA;AAAA;AAAA;AACZ,oBAAKC,QAAL,CAAc;AACVD,gBAAAA,SAAS,EAAE;AADD,eAAd;AAAA;AAAA;AAAA;AAAA,sCAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACoBE,KAAK,CAAC,4CAAD,CADzB;;AAAA;AACOC,wBAAAA,IADP;AAAA;AAAA,+BAE0BA,IAAI,CAACC,IAAL,EAF1B;;AAAA;AAEOC,wBAAAA,UAFP;;AAIC,8BAAKJ,QAAL,CAAc;AACVD,0BAAAA,SAAS,EAAE,KADD;AAEVD,0BAAAA,KAAK,EAAEM;AAFG,yBAAd;;AAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFH;;AADY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;kEAcF,YAAM;AAChB,YAAKJ,QAAL,CAAc;AACVH,QAAAA,MAAM,+BAAM,MAAKQ,KAAL,CAAWR,MAAjB,qBAAmC,IAAIS,IAAJ,GAAWC,MAAX,EAAnC;AADI,OAAd;AAGH;;;;;;;wCApDmB;AAChBC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,mBAAxB,EAA6C,KAAKC,WAAlD;AACA,WAAKC,aAAL;AACH;;;6BAEQ;AACL,aACIC,6EAGIA,0CACIA,mDADJ,EAEK,CAAC,KAAKP,KAAL,CAAWR,MAAX,CAAkBgB,MAAnB,IACGD,wJAHR,EAKK,KAAKP,KAAL,CAAWR,MAAX,CAAkBiB,GAAlB,CAAsB,UAAAC,KAAK;AAAA,eACxBH;AAAK,UAAA,GAAG,gBAASG,KAAT;AAAR,WAA2BA,KAA3B,CADwB;AAAA,OAA3B,CALL,CAHJ,EAYIH,0CACIA,kDADJ,EAEK,KAAKP,KAAL,CAAWN,SAAX,IAAwBa,wDAF7B,EAGK,KAAKP,KAAL,CAAWP,KAAX,CAAiBgB,GAAjB,CAAqB,UAAAE,IAAI,EAAI;AAC1B,eACIJ;AAAK,UAAA,GAAG,iBAAUI,IAAI,CAACC,EAAf;AAAR,WACKD,IAAI,CAACE,IADV,CADJ;AAKH,OANA,CAHL,CAZJ,CADJ;AA0BH;;;;EAxCqBC;;AA+D1BvB,WAAW,CAACwB,SAAZ,GAAwB,EAAxB;;;;"}